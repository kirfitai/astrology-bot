from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime
import logging

from aiogram import Bot
from database import operations
from services.ephemeris import calculate_planet_positions_utc, calculate_houses_utc, format_natal_chart
from services.openai_service import generate_daily_horoscope, generate_monthly_horoscope

logger = logging.getLogger(__name__)

def setup_scheduler(bot: Bot) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤"""
    scheduler = AsyncIOScheduler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –≤ –∫–∞–∂–¥—ã–π —á–∞—Å
    for hour in range(24):
        for minute in [0, 30]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            time_str = f"{hour:02d}:{minute:02d}"
            scheduler.add_job(
                send_daily_horoscopes,
                CronTrigger(hour=hour, minute=minute),
                kwargs={"bot": bot, "time_str": time_str}
            )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—è—á–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 12:00)
    scheduler.add_job(
        send_monthly_horoscopes,
        CronTrigger(day="last", hour=12, minute=0),
        kwargs={"bot": bot}
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–≤ 00:30)
    scheduler.add_job(
        check_expired_subscriptions,
        CronTrigger(hour=0, minute=30),
        kwargs={"bot": bot}
    )
    
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return scheduler

async def send_daily_horoscopes(bot: Bot, time_str: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–∞ –≤—Ä–µ–º—è {time_str}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –≤ —ç—Ç–æ –≤—Ä–µ–º—è
        users = operations.get_users_with_horoscope_at_time(time_str)
        if not users:
            logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –≤—Ä–µ–º—è {time_str}")
            return
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –Ω–∞ –≤—Ä–µ–º—è {time_str}")
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        today = datetime.now().strftime("%d.%m.%Y")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for user in users:
            user_id = user["user_id"]
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                natal_chart = user.get("natal_chart")
                if not natal_chart:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
                    continue
                
                lat = user.get("horoscope_latitude")
                lon = user.get("horoscope_longitude")
                if not lat or not lon:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç
                now = datetime.now()
                planets = calculate_planet_positions_utc(now, lat, lon)
                houses = calculate_houses_utc(now, lat, lon)
                
                if not planets or not houses:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    continue
                
                formatted_planets = format_natal_chart(planets, houses)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º
                is_premium = user.get("subscription_type") != "free"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
                horoscope_text = await generate_daily_horoscope(
                    natal_chart,
                    formatted_planets,
                    user_id,
                    is_premium
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –±–∞–∑—É
                operations.add_horoscope(user_id, horoscope_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
                await bot.send_message(
                    user_id,
                    f"üåü –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {today}:\n\n{horoscope_text}"
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –Ω–∞ –≤—Ä–µ–º—è {time_str}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_daily_horoscopes: {e}")

async def send_monthly_horoscopes(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Å—è—á–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Å—è—á–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        users = operations.get_all_users()
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
            return
        
        # –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        now = datetime.now()
        next_month = now.month + 1 if now.month < 12 else 1
        next_month_year = now.year if now.month < 12 else now.year + 1
        next_month_name = {
            1: "—è–Ω–≤–∞—Ä—å", 2: "—Ñ–µ–≤—Ä–∞–ª—å", 3: "–º–∞—Ä—Ç", 4: "–∞–ø—Ä–µ–ª—å",
            5: "–º–∞–π", 6: "–∏—é–Ω—å", 7: "–∏—é–ª—å", 8: "–∞–≤–≥—É—Å—Ç",
            9: "—Å–µ–Ω—Ç—è–±—Ä—å", 10: "–æ–∫—Ç—è–±—Ä—å", 11: "–Ω–æ—è–±—Ä—å", 12: "–¥–µ–∫–∞–±—Ä—å"
        }[next_month]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        for user in users:
            user_id = user["user_id"]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
            if user.get("subscription_type") == "free":
                continue
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                natal_chart = user.get("natal_chart")
                if not natal_chart:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã")
                    continue
                
                lat = user.get("horoscope_latitude") or user.get("latitude")
                lon = user.get("horoscope_longitude") or user.get("longitude")
                if not lat or not lon:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–∫–∞–∑–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
                    continue
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –Ω–∞ 1-–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
                forecast_date = datetime(next_month_year, next_month, 1, 12, 0)
                planets = calculate_planet_positions_utc(forecast_date, lat, lon)
                houses = calculate_houses_utc(forecast_date, lat, lon)
                
                if not planets or not houses:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    continue
                
                formatted_planets = format_natal_chart(planets, houses)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Å—è—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø
                horoscope_text = await generate_monthly_horoscope(
                    natal_chart,
                    formatted_planets,
                    user_id,
                    is_premium=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –±–∞–∑—É
                operations.add_horoscope(user_id, horoscope_text, "monthly")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
                await bot.send_message(
                    user_id,
                    f"üåô –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {next_month_name} {next_month_year}:\n\n{horoscope_text}"
                )
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ—Å—è—á–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ—Å—è—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ send_monthly_horoscopes: {e}")

async def check_expired_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = operations.get_all_users()
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫")
            return
        
        now = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —Å–∫–æ—Ä–æ –∏–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∏
        for user in users:
            user_id = user["user_id"]
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –ø–ª–∞–Ω–æ–º
            if user.get("subscription_type") == "free":
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            if user.get("subscription_end_date"):
                end_date = datetime.fromisoformat(user.get("subscription_end_date"))
                days_left = (end_date - now).days
                
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π –∏–ª–∏ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞
                if 0 <= days_left <= 3:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    await bot.send_message(
                        user_id,
                        f"‚ö†Ô∏è –í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.\n\n"
                        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏!",
                        reply_markup=bot.types.InlineKeyboardMarkup(
                            inline_keyboard=[
                                [bot.types.InlineKeyboardButton(
                                    text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
                                    callback_data="subscribe_menu"
                                )]
                            ]
                        )
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                elif days_left < 0:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    operations.update_user_subscription(user_id, "free")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    await bot.send_message(
                        user_id,
                        "‚ö†Ô∏è –í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                        "–í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π "
                        "–±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                        reply_markup=bot.types.InlineKeyboardMarkup(
                            inline_keyboard=[
                                [bot.types.InlineKeyboardButton(
                                    text="üíé –û–±–Ω–æ–≤–∏—Ç—å Premium", 
                                    callback_data="subscribe_menu"
                                )]
                            ]
                        )
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_expired_subscriptions: {e}")