import swisseph as swe
from datetime import datetime
from tabulate import tabulate
import logging
from config import EPHE_PATH

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –∫ ephemeris
swe.set_ephe_path(EPHE_PATH)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–ª–∞–Ω–µ—Ç –∏ –¥–æ–º–æ–≤
planet_names_ru = {
    "Sun": "–°–æ–ª–Ω—Ü–µ",
    "Moon": "–õ—É–Ω–∞",
    "Mercury": "–ú–µ—Ä–∫—É—Ä–∏–π",
    "Venus": "–í–µ–Ω–µ—Ä–∞",
    "Mars": "–ú–∞—Ä—Å",
    "Jupiter": "–Æ–ø–∏—Ç–µ—Ä",
    "Saturn": "–°–∞—Ç—É—Ä–Ω",
    "Uranus": "–£—Ä–∞–Ω",
    "Neptune": "–ù–µ–ø—Ç—É–Ω",
    "Pluto": "–ü–ª—É—Ç–æ–Ω",
    "Lilith": "–õ–∏–ª–∏—Ç",
    "North Node": "–°–µ–≤–µ—Ä–Ω—ã–π –£–∑–µ–ª",
    "South Node": "–Æ–∂–Ω—ã–π –£–∑–µ–ª",
    "Ascendant": "–ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç",
    "MC": "MC (–°–µ—Ä–µ–¥–∏–Ω–∞ –ù–µ–±–∞)"
}

house_names_ru = {
    "House 1": "1-–π –¥–æ–º",
    "House 2": "2-–π –¥–æ–º",
    "House 3": "3-–π –¥–æ–º",
    "House 4": "4-–π –¥–æ–º",
    "House 5": "5-–π –¥–æ–º",
    "House 6": "6-–π –¥–æ–º",
    "House 7": "7-–π –¥–æ–º",
    "House 8": "8-–π –¥–æ–º",
    "House 9": "9-–π –¥–æ–º",
    "House 10": "10-–π –¥–æ–º",
    "House 11": "11-–π –¥–æ–º",
    "House 12": "12-–π –¥–æ–º"
}

def translate_to_russian(name):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –∏ –¥–æ–º–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫"""
    return planet_names_ru.get(name, house_names_ru.get(name, name))

def get_zodiac_sign(longitude):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–æ–ª–≥–æ—Ç–µ"""
    signs = [
        (0, "–û–≤–µ–Ω"), (30, "–¢–µ–ª–µ—Ü"), (60, "–ë–ª–∏–∑–Ω–µ—Ü—ã"), (90, "–†–∞–∫"),
        (120, "–õ–µ–≤"), (150, "–î–µ–≤–∞"), (180, "–í–µ—Å—ã"), (210, "–°–∫–æ—Ä–ø–∏–æ–Ω"),
        (240, "–°—Ç—Ä–µ–ª–µ—Ü"), (270, "–ö–æ–∑–µ—Ä–æ–≥"), (300, "–í–æ–¥–æ–ª–µ–π"), (330, "–†—ã–±—ã")
    ]
    for i, (degree, sign) in enumerate(signs):
        if longitude < degree:
            return signs[i - 1][1] if i > 0 else signs[-1][1]
    return signs[-1][1]

def get_house(longitude, houses):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º –ø–æ –¥–æ–ª–≥–æ—Ç–µ"""
    for i in range(1, 13):
        start = houses.get(f"House {i}")
        next_house = i % 12 + 1
        end = houses.get(f"House {next_house}", 360)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 0¬∞
        if start > end:
            if longitude >= start or longitude < end:
                return i
        else:
            if start <= longitude < end:
                return i
    
    return 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1-–π –¥–æ–º, –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ

def calculate_planet_positions_utc(utc_dt, lat, lon):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç –≤ UTC"""
    try:
        jd = swe.julday(utc_dt.year, utc_dt.month, utc_dt.day, utc_dt.hour + utc_dt.minute / 60.0)
        planets = {
            "Sun": swe.SUN,
            "Moon": swe.MOON,
            "Mercury": swe.MERCURY,
            "Venus": swe.VENUS,
            "Mars": swe.MARS,
            "Jupiter": swe.JUPITER,
            "Saturn": swe.SATURN,
            "Uranus": swe.URANUS,
            "Neptune": swe.NEPTUNE,
            "Pluto": swe.PLUTO,
            "Lilith": swe.MEAN_APOG,
            "North Node": swe.MEAN_NODE
        }
        res = {}
        for name, pid in planets.items():
            pos, _ = swe.calc_ut(jd, pid)
            res[name] = {"longitude": pos[0], "latitude": pos[1], "house": None}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Æ–∂–Ω—ã–π –£–∑–µ–ª (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –°–µ–≤–µ—Ä–Ω–æ–º—É)
        res["South Node"] = {"longitude": (res["North Node"]["longitude"] + 180) % 360,
                             "latitude": -res["North Node"]["latitude"],
                             "house": None}
        
        logging.info("–†–∞—Å—á—ë—Ç –ø–ª–∞–Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return res
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–∞–Ω–µ—Ç: {e}")
        return None

def calculate_houses_utc(utc_dt, lat, lon):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–æ–º–æ–≤ –≤ UTC"""
    try:
        jd = swe.julday(utc_dt.year, utc_dt.month, utc_dt.day, utc_dt.hour + utc_dt.minute / 60.0)
        houses, asc_mc = swe.houses(jd, lat, lon, b'P')
        asc = asc_mc[0]
        mc = asc_mc[1]
        houses_dict = {f"House {i+1}": house for i, house in enumerate(houses)}
        houses_dict["Ascendant"] = asc
        houses_dict["MC"] = mc
        logging.info("–†–∞—Å—á—ë—Ç –¥–æ–º–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return houses_dict
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –¥–æ–º–æ–≤: {e}")
        return None

def assign_houses_to_planets(planets, houses):
    """–ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–µ—Ç–∞–º –¥–æ–º–∞"""
    if not planets or not houses:
        return planets
    
    result = planets.copy()
    for planet_name, data in result.items():
        house_num = get_house(data["longitude"], houses)
        data["house"] = house_num
    
    return result

def format_natal_chart(planets, houses):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    planets_with_houses = assign_houses_to_planets(planets, houses)
    
    planet_emojis = {
        "Sun": "‚òÄÔ∏è",
        "Moon": "üåô",
        "Mercury": "‚òøÔ∏è",
        "Venus": "‚ôÄÔ∏è",
        "Mars": "‚ôÇÔ∏è",
        "Jupiter": "‚ôÉ",
        "Saturn": "‚ôÑ",
        "Uranus": "‚ôÖ",
        "Neptune": "‚ôÜ",
        "Pluto": "‚ôá",
        "Lilith": "üîÆ",
        "North Node": "‚òä",
        "South Node": "‚òã",
        "Ascendant": "‚¨ÜÔ∏è",
        "MC": "üîù"
    }
    
    sign_emojis = {
        "–û–≤–µ–Ω": "‚ôàÔ∏è",
        "–¢–µ–ª–µ—Ü": "‚ôâÔ∏è",
        "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôäÔ∏è",
        "–†–∞–∫": "‚ôãÔ∏è",
        "–õ–µ–≤": "‚ôåÔ∏è",
        "–î–µ–≤–∞": "‚ôçÔ∏è",
        "–í–µ—Å—ã": "‚ôéÔ∏è",
        "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôèÔ∏è",
        "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôêÔ∏è",
        "–ö–æ–∑–µ—Ä–æ–≥": "‚ôëÔ∏è",
        "–í–æ–¥–æ–ª–µ–π": "‚ôíÔ∏è",
        "–†—ã–±—ã": "‚ôìÔ∏è"
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = "‚ú® –í–ê–®–ê –ù–ê–¢–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê ‚ú®\n"
    header += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö
    planets_section = "ü™ê –ü–õ–ê–ù–ï–¢–´\n"
    planets_section += "‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà\n"
    
    formatted_data = []
    for planet, data in planets_with_houses.items():
        if planet in ["Ascendant", "MC"]:
            continue  # –î–æ–±–∞–≤–∏–º –∏—Ö –ø–æ–∑–∂–µ –≤ —Å–µ–∫—Ü–∏—é –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç –∏ MC
            
        sign = get_zodiac_sign(data["longitude"])
        house = data["house"]
        planet_ru = translate_to_russian(planet)
        
        planet_emoji = planet_emojis.get(planet, "")
        sign_emoji = sign_emojis.get(sign, "")
        
        formatted_data.append([
            f"{planet_emoji} {planet_ru}", 
            f"{sign_emoji} {sign}", 
            f"–î–æ–º {house}"
        ])
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–µ—Ç—ã –≤ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–º –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    planet_order = [
        "Sun", "Moon", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", 
        "Uranus", "Neptune", "Pluto", "Lilith", "North Node", "South Node"
    ]
    formatted_data.sort(key=lambda x: planet_order.index(next((p for p in planet_order if translate_to_russian(p) in x[0]), len(planet_order))))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–µ–∫—Ü–∏—é –ø–ª–∞–Ω–µ—Ç
    for row in formatted_data:
        planets_section += f"{row[0]:<20} {row[1]:<15} {row[2]:<10}\n"
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –ê—Å—Ü–µ–Ω–¥–µ–Ω—Ç–∞ –∏ MC
    houses_section = "\nüè† –£–ì–õ–û–í–´–ï –î–û–ú–ê\n"
    houses_section += "‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà‚îà\n"
    
    for house_point in ["Ascendant", "MC"]:
        if house_point in planets_with_houses:
            sign = get_zodiac_sign(planets_with_houses[house_point]["longitude"])
            point_ru = translate_to_russian(house_point)
            point_emoji = planet_emojis.get(house_point, "")
            sign_emoji = sign_emojis.get(sign, "")
            
            houses_section += f"{point_emoji} {point_ru:<18} {sign_emoji} {sign:<15}\n"
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    formatted_chart = f"{header}{planets_section}{houses_section}\n"
    formatted_chart += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    formatted_chart += "–ö–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é Swiss Ephemeris"

    return formatted_chart

def get_aspects_between_charts(chart1, chart2):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∞—Å–ø–µ–∫—Ç—ã –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞—Ç–∞–ª—å–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏"""
    aspects = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –∏—Ö –æ—Ä–±–∏—Å—ã
    aspect_types = {
        0: {"name": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", "orb": 8, "influence": "—Å–∏–ª—å–Ω–æ–µ"},
        60: {"name": "–°–µ–∫—Å—Ç–∏–ª—å", "orb": 4, "influence": "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ"},
        90: {"name": "–ö–≤–∞–¥—Ä–∞—Ç—É—Ä–∞", "orb": 6, "influence": "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–µ"},
        120: {"name": "–¢—Ä–∏–Ω", "orb": 8, "influence": "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ"},
        180: {"name": "–û–ø–ø–æ–∑–∏—Ü–∏—è", "orb": 8, "influence": "–Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–µ"}
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ –ø–ª–∞–Ω–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    important_planets = ["Sun", "Moon", "Mercury", "Venus", "Mars", "Jupiter", "Saturn", "Ascendant", "MC"]
    
    for planet1_name in important_planets:
        if planet1_name not in chart1:
            continue
            
        for planet2_name in important_planets:
            if planet2_name not in chart2:
                continue
                
            # –ò–∑–±–µ–≥–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç—ã —Å —Å–∞–º–æ–π —Å–æ–±–æ–π –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
            if planet1_name == planet2_name:
                continue
                
            planet1 = chart1[planet1_name]
            planet2 = chart2[planet2_name]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–æ–ª–≥–æ—Ç–µ
            diff = abs(planet1["longitude"] - planet2["longitude"])
            if diff > 180:
                diff = 360 - diff
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å–ø–µ–∫—Ç—ã
            for angle, aspect_info in aspect_types.items():
                orb = aspect_info["orb"]
                if angle - orb <= diff <= angle + orb:
                    exact_diff = abs(diff - angle)
                    strength = "—Å–∏–ª—å–Ω—ã–π" if exact_diff <= orb/2 else "—É–º–µ—Ä–µ–Ω–Ω—ã–π"
                    
                    aspects.append({
                        "planet1": planet1_name,
                        "planet2": planet2_name,
                        "aspect_type": aspect_info["name"],
                        "angle": angle,
                        "exact_diff": exact_diff,
                        "strength": strength,
                        "influence": aspect_info["influence"]
                    })
    
    return aspects

def format_aspects(aspects):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞—Å–ø–µ–∫—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not aspects:
        return "–ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏."
        
    formatted_aspects = []
    for aspect in aspects:
        planet1_ru = translate_to_russian(aspect["planet1"])
        planet2_ru = translate_to_russian(aspect["planet2"])
        formatted_aspects.append([
            f"{planet1_ru} - {planet2_ru}",
            aspect["aspect_type"],
            aspect["strength"],
            aspect["influence"]
        ])
    
    result = tabulate(formatted_aspects, headers=["–ü–ª–∞–Ω–µ—Ç—ã", "–ê—Å–ø–µ–∫—Ç", "–°–∏–ª–∞", "–í–ª–∏—è–Ω–∏–µ"], tablefmt="pretty")
    return result