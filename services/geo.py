from geopy.geocoders import Nominatim
from timezonefinder import TimezoneFinder
import pytz
from datetime import datetime
import logging
import re

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
geolocator = Nominatim(user_agent="astrology_bot")
tfinder = TimezoneFinder()

def parse_coordinates(coords_str):
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞'
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞) –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ –ø—Ä–æ–±–µ–ª
        cleaned_str = re.sub(r'[^\d.,\s\-+]', '', coords_str)
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ –ø—Ä–æ–±–µ–ª—É
        parts = re.split(r'[,\s]+', cleaned_str)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
        parts = [p for p in parts if p]
        
        if len(parts) >= 2:
            lat = float(parts[0])
            lon = float(parts[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if -90 <= lat <= 90 and -180 <= lon <= 180:
                return (lat, lon)
            else:
                logging.error(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {lat}, {lon}")
                return None
        else:
            logging.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∞—Å—Ç–µ–π –≤ —Å—Ç—Ä–æ–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coords_str}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç '{coords_str}': {e}")
        return None

def get_location_info(city, birth_dt=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
    """
    try:
        location = geolocator.geocode(city)
        if not location:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
            return None
        
        lat = location.latitude
        lon = location.longitude
        tz_name = tfinder.timezone_at(lng=lon, lat=lat)
        
        if not tz_name:
            tz_name = "UTC"
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è {city}, –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC")
        
        result = {
            "lat": lat,
            "lon": lon,
            "tz_name": tz_name,
            "address": location.address
        }
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞/–≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ—â–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        if birth_dt:
            tz = pytz.timezone(tz_name)
            localized_dt = tz.localize(birth_dt, is_dst=None)
            offset = int(localized_dt.utcoffset().total_seconds())
            is_dst = bool(localized_dt.dst())
            
            result["gmt_offset"] = offset
            result["is_dst"] = is_dst
        
        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è {city}: lat={lat}, lon={lon}, tz={tz_name}")
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_location_info –¥–ª—è {city}: {e}")
        return None

def get_utc_datetime(date_str, time_str, tz_name):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ UTC
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç datetime –≤ UTC
    """
    try:
        local_dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
        tz = pytz.timezone(tz_name)
        localized_dt = tz.localize(local_dt, is_dst=None)
        utc_dt = localized_dt.astimezone(pytz.utc)
        logging.info(f"–í—Ä–µ–º—è {local_dt} ({tz_name}) –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ UTC: {utc_dt}")
        return utc_dt
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_utc_datetime: {e}")
        return None

def format_location_info(location_info):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    if not location_info:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    
    parts = [
        f"üìç {location_info.get('address', '–ê–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}",
        f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_info.get('lat', 0):.4f}, {location_info.get('lon', 0):.4f}",
        f"üïí –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {location_info.get('tz_name', 'UTC')}"
    ]
    
    if "gmt_offset" in location_info:
        hours = location_info["gmt_offset"] // 3600
        sign = "+" if hours >= 0 else "-"
        parts.append(f"‚è± –°–º–µ—â–µ–Ω–∏–µ –æ—Ç GMT: {sign}{abs(hours):02d}:00")
    
    return "\n".join(parts)