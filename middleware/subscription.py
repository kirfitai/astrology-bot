from typing import Callable, Dict, Any, Awaitable
from datetime import datetime
import logging

from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.event.bases import CancelHandler

from database import operations

logger = logging.getLogger(__name__)

class SubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—á–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ó–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥ /start, /help, /subscription, /reset 
        –∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
        1. –ù–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        2. –ù–∞–ª–∏—á–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º User ID –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if isinstance(event, Message):
            user_id = str(event.from_user.id)
            text = event.text
            message = event
        elif isinstance(event, CallbackQuery):
            user_id = str(event.from_user.id)
            text = event.data
            message = event.message
        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/callback
        if self._should_skip_check(text):
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = operations.get_user(user_id)
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if isinstance(event, Message):
                username = event.from_user.username or ""
                first_name = event.from_user.first_name or ""
                last_name = event.from_user.last_name or ""
                operations.create_user(user_id, username, first_name, last_name)
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –ª–∏–º–∏—Ç—ã
        if user.get("subscription_type") != "free":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
            if user.get("subscription_end_date"):
                end_date = datetime.fromisoformat(user.get("subscription_end_date"))
                if end_date > datetime.now():
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    return await handler(event, data)
                else:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    operations.update_user_subscription(user_id, "free")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ callback, –∏ —á–∏—Å–ª–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω–æ
        if isinstance(event, Message) and not self._is_command(text) and user.get("free_messages_left", 0) <= 0:
            if not self._is_subscription_related(text):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                await message.answer(
                    "‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                    reply_markup=message.bot.types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [message.bot.types.InlineKeyboardButton(
                                text="üíé –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ", 
                                callback_data="premium_info"
                            )]
                        ]
                    )
                )
                # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                raise CancelHandler()
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        return await handler(event, data)
    
    def _should_skip_check(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return True
        
        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
        allowed_commands = ['/start', '/help', '/subscription', '/reset', '/menu']
        if any(text.startswith(cmd) for cmd in allowed_commands):
            return True
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback'–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        if text.startswith(('subscribe:', 'payment:', 'premium_info')):
            return True
        
        return False
    
    def _is_command(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π"""
        if not text:
            return False
        return text.startswith('/')
    
    def _is_subscription_related(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω –ª–∏ —Ç–µ–∫—Å—Ç —Å –ø–æ–¥–ø–∏—Å–∫–æ–π"""
        if not text:
            return False
        
        subscription_keywords = ['–ø–æ–¥–ø–∏—Å–∫–∞', '–ø–æ–¥–ø–∏—Å–∫–∏', 'premium', '–ø—Ä–µ–º–∏—É–º', '–æ–ø–ª–∞—Ç–∞', '–ø–ª–∞—Ç–µ–∂']
        return any(keyword in text.lower() for keyword in subscription_keywords)