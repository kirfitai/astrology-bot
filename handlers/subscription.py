from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging

from states.user_states import SubscriptionStates, NatalChartStates
from utils.keyboards import (
    get_main_menu,
    get_subscription_menu,
    get_subscription_plans,
    get_back_button
)
from database import operations
from config import SUBSCRIPTION_PRICES
from handlers.start import back_to_menu_handler

logger = logging.getLogger(__name__)

async def subscription_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_subscription = False
    subscription_end = None
    
    if user and user.get("subscription_type") != "free" and user.get("subscription_end_date"):
        end_date = datetime.fromisoformat(user.get("subscription_end_date"))
        if end_date > datetime.now():
            has_subscription = True
            subscription_end = end_date
    
    if has_subscription:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        days_left = (subscription_end - datetime.now()).days
        
        await message.answer(
            f"üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {user.get('subscription_type')}\n\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end.strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",
            reply_markup=get_subscription_menu(is_subscribed=True)
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        messages_left = user.get("free_messages_left", 0) if user else 0
        
        await message.answer(
            "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
            f"–£ –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}/10\n\n"
            "–° Premium –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏",
            reply_markup=get_subscription_menu(is_subscribed=False)
        )
    
    await state.set_state(SubscriptionStates.selecting_plan)

async def subscription_action_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    if await back_to_menu_handler(message, state):
        return
    
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    if message.text == "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_subscription_plans()
        )
    
    elif message.text == "‚ùì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏":
        await message.answer(
            "üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º ‚Äî –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ "
            "–ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏: "
            "–ª—é–±–æ–≤—å, –∫–∞—Ä—å–µ—Ä–∞, –∑–¥–æ—Ä–æ–≤—å–µ, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π "
            "–∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã ‚Äî —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–Ω–µ–µ\n\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å\n\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å",
            reply_markup=get_subscription_menu(is_subscribed=False)
        )
    
    elif message.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if user and user.get("subscription_type") != "free" and user.get("subscription_end_date"):
            end_date = datetime.fromisoformat(user.get("subscription_end_date"))
            days_left = (end_date - datetime.now()).days
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = operations.get_user_transactions(user_id)
            
            if transactions:
                last_transaction = transactions[0]
                payment_date = datetime.fromisoformat(last_transaction["created_at"]).strftime("%d.%m.%Y")
                amount = last_transaction["amount"]
                payment_method = last_transaction["payment_method"]
                
                transactions_text = (
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {payment_date}\n"
                    f"–°—É–º–º–∞: ${amount}\n"
                    f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
                )
            else:
                transactions_text = "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            
            await message.answer(
                f"üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n"
                f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user.get('subscription_type')}\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
                f"üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n"
                f"{transactions_text}\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Premium!",
                reply_markup=get_subscription_menu(is_subscribed=True)
            )
        else:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=get_subscription_menu(is_subscribed=False)
            )
    
    elif message.text == "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_subscription_plans()
        )

async def subscription_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏"""
    action, plan = callback.data.split(":")
    
    if action == "subscribe":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
        price = SUBSCRIPTION_PRICES.get(plan, 0)
        months = 1
        if plan == "3_month":
            months = 3
        elif plan == "1_year":
            months = 12
        
        plan_text = {
            "1_month": "1 –º–µ—Å—è—Ü",
            "3_month": "3 –º–µ—Å—è—Ü–∞",
            "1_year": "1 –≥–æ–¥"
        }.get(plan, plan)
        
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            subscription_plan=plan,
            subscription_price=price,
            subscription_months=months
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_text = (
            f"üí≥ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            f"–ü–ª–∞–Ω: {plan_text}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã."
        )
        
        await callback.message.answer(
            payment_text,
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"payment:{plan}")]
                ]
            )
        )
        
        await state.set_state(SubscriptionStates.processing_payment)

async def payment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    action, plan = callback.data.split(":")
    
    if action == "payment":
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        
        await callback.answer("–ò–Ω–∏—Ü–∏–∏—Ä—É—é –ø–ª–∞—Ç–µ–∂...")
        
        data = await state.get_data()
        price = data.get("subscription_price", 0)
        months = data.get("subscription_months", 1)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ Tribute
        # –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user_id = str(callback.from_user.id)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        operations.add_subscription_transaction(
            user_id,
            plan,
            price,
            "completed",
            "card",
            months
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = operations.update_user_subscription(user_id, plan, months)
        
        end_date = datetime.now() + timedelta(days=30*months)
        
        await callback.message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {plan}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ Premium –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å!",
            reply_markup=get_main_menu()
        )
        
        await state.set_state(NatalChartStates.dialog_active)

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ /subscription –∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    dp.message.register(subscription_command, Command("subscription"))
    dp.message.register(subscription_command, F.text == "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    dp.message.register(
        subscription_action_handler,
        SubscriptionStates.selecting_plan,
        F.text.in_([
            "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "‚ùì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ",
            "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        ])
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(
        subscription_callback,
        lambda c: c.data.startswith("subscribe:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
    dp.callback_query.register(
        payment_callback,
        lambda c: c.data.startswith("payment:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ
    dp.callback_query.register(
        lambda c, state: subscription_command(c.message, state),
        lambda c: c.data == "subscribe_menu"
    )