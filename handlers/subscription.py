from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging
import json

from utils.error_logger import handle_exception
from states.user_states import SubscriptionStates, NatalChartStates
from utils.keyboards import (
    get_main_menu,
    get_subscription_menu,
    get_back_button
)
from database import operations
from config import SUBSCRIPTION_PRICES, ADMIN_TELEGRAM_ID, TG_STARS_MULTIPLIER
from services.payment_service import create_payment, telegram_stars_payment
from utils.error_logger import handle_exception, log_error
from handlers.start import back_to_menu_handler

logger = logging.getLogger(__name__)

@handle_exception
async def subscription_command(message: types.Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_subscription = False
    subscription_end = None
    
    if user and user.get("subscription_type") != "free" and user.get("subscription_end_date"):
        end_date = datetime.fromisoformat(user.get("subscription_end_date"))
        if end_date > datetime.now():
            has_subscription = True
            subscription_end = end_date
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    has_pending_payment = operations.check_user_has_active_payment(user_id)
    
    if has_pending_payment:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
                ]
            )
        )
        return
    
    if has_subscription:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        days_left = (subscription_end - datetime.now()).days
        
        await message.answer(
            f"üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {user.get('subscription_type')}\n\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end.strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",
            reply_markup=get_subscription_menu(is_subscribed=True)
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        messages_left = user.get("free_messages_left", 0) if user else 0
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ü–µ–Ω–∞–º–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö
        await message.answer(
            "üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            f"–£ –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}/3\n\n"
            "–° Premium –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–ª–∞–Ω–µ—Ç –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ú® 1 –Ω–µ–¥–µ–ª—è - 90 ‚≠êÔ∏è", callback_data="direct_payment:1_week:90")],
                    [types.InlineKeyboardButton(text="‚ú® 1 –º–µ—Å—è—Ü - 499 ‚≠êÔ∏è", callback_data="direct_payment:1_month:499")],
                    [types.InlineKeyboardButton(text="‚ú® 1 –≥–æ–¥ - 2999 ‚≠êÔ∏è", callback_data="direct_payment:1_year:2999")],
                    [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
                ]
            )
        )
    
    await state.set_state(SubscriptionStates.selecting_plan)

@handle_exception
async def direct_payment_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –∏ —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    _, plan, stars_amount = callback.data.split(":")
    stars_amount = int(stars_amount)
    user_id = str(callback.from_user.id)
    
    await callback.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö
    months = 1
    if plan == "3_month":
        months = 3
    elif plan == "1_year":
        months = 12
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    await state.update_data(
        subscription_plan=plan,
        subscription_price=SUBSCRIPTION_PRICES.get(plan, 0),
        subscription_months=months,
        stars_amount=stars_amount
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
    transaction_id = operations.add_subscription_transaction(
        user_id,
        plan,
        SUBSCRIPTION_PRICES.get(plan, 0),
        "pending",
        "telegram_stars",
        months
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(transaction_id=transaction_id)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    from aiogram.types import LabeledPrice
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    plan_text = {
        "1_week": "1 –Ω–µ–¥–µ–ª—é",
        "1_month": "1 –º–µ—Å—è—Ü",
        "3_month": "3 –º–µ—Å—è—Ü–∞",
        "1_year": "1 –≥–æ–¥"
    }.get(plan, plan)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞
    title = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {plan_text}"
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ –Ω–∞ {plan_text}"
    payload = f"sub_{plan}_{transaction_id}"
    provider_token = ""  # –î–ª—è Telegram Stars –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
    currency = "XTR"    # XTR - —ç—Ç–æ –≤–∞–ª—é—Ç–∞ Telegram Stars
    prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=stars_amount)]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞–ø—Ä—è–º—É—é
        await callback.message.answer_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            start_parameter=f"sub_{plan}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å ID –∏–Ω–≤–æ–π—Å–∞
        operations.update_transaction_status(
            transaction_id, 
            "pending", 
            {"invoice_id": payload}
        )
        
        await state.set_state(SubscriptionStates.processing_payment)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –∑–≤–µ–∑–¥–∞–º–∏: {e}")
        
        await callback.message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {e}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        
        # –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        operations.update_transaction_status(transaction_id, "failed", {"error": str(e)})
        await state.clear()

@handle_exception
async def cancel_payment_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer("–û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂...")
    
    user_id = str(callback.from_user.id)
    data = await state.get_data()
    transaction_id = data.get("transaction_id")
    
    if transaction_id:
        operations.update_transaction_status(transaction_id, "cancelled")
    else:
        operations.cancel_pending_transactions(user_id)
    
    await callback.message.answer(
        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu()
    )
    
    await state.clear()

@handle_exception
async def premium_info_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ"""
    await callback.answer()
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É –Ω–∞ –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
    await subscription_command(callback.message, state, **kwargs)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–¥–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payload = pre_checkout_query.invoice_payload
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        await pre_checkout_query.answer(ok=True)
        logger.info(f"Pre-checkout query approved: {payload}")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        await pre_checkout_query.answer(
            ok=False,
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        logger.error(f"Error in pre_checkout: {e}")

async def process_successful_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = message.successful_payment
        payload = payment_info.invoice_payload
        total_amount = payment_info.total_amount
        currency = payment_info.currency
        
        user_id = str(message.from_user.id)
        
        logger.info(f"Successful payment from user {user_id}: {payload}, {total_amount} {currency}")
        
        # –ü–∞—Ä—Å–∏–º payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if "_" in payload:
            parts = payload.split("_")
            if len(parts) >= 3:
                plan = parts[1]
                transaction_id = parts[2]
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                result = await telegram_stars_payment.process_stars_transfer(user_id, plan, total_amount, transaction_id)
                
                if result.get("success"):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.answer(
                        "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏!",
                        reply_markup=get_main_menu()
                    )
                    
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞
                    await state.set_state(NatalChartStates.dialog_active)
                else:
                    logger.error(f"Failed to process successful payment: {result.get('error')}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.answer(
                        "‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                        reply_markup=get_main_menu()
                    )
            else:
                logger.error(f"Invalid payload format: {payload}")
        else:
            logger.warning(f"Unknown payload format: {payload}")
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            operations.update_user_subscription(user_id, "1_month", 1)
            
            await message.answer(
                "‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏!",
                reply_markup=get_main_menu()
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞
            await state.set_state(NatalChartStates.dialog_active)
    except Exception as e:
        logger.error(f"Error processing successful payment: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=get_main_menu()
        )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ /subscription –∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    dp.message.register(subscription_command, Command("subscription"))
    dp.message.register(subscription_command, F.text == "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –∏ —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(
        direct_payment_callback,
        lambda c: c.data.startswith("direct_payment:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
    dp.callback_query.register(
        cancel_payment_callback,
        lambda c: c.data == "cancel_payment"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ
    dp.callback_query.register(
        premium_info_callback,
        lambda c: c.data == "premium_info"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(
        lambda c, state: subscription_command(c.message, state, **kwargs),
        lambda c: c.data == "subscribe_menu"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    dp.pre_checkout_query.register(process_pre_checkout)
    dp.message.register(process_successful_payment, F.successful_payment)