from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
import logging

from utils.error_logger import handle_exception
from states.user_states import SubscriptionStates, NatalChartStates
from utils.keyboards import (
    get_main_menu,
    get_subscription_menu,
    get_subscription_plans,
    get_payment_methods,
    get_back_button
)
from database import operations
from config import SUBSCRIPTION_PRICES, ADMIN_TELEGRAM_ID
from services.payment_service import create_payment, telegram_stars_payment
from utils.error_logger import handle_exception, log_error
from handlers.start import back_to_menu_handler

logger = logging.getLogger(__name__)

@handle_exception
async def subscription_command(message: types.Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    has_subscription = False
    subscription_end = None
    
    if user and user.get("subscription_type") != "free" and user.get("subscription_end_date"):
        end_date = datetime.fromisoformat(user.get("subscription_end_date"))
        if end_date > datetime.now():
            has_subscription = True
            subscription_end = end_date
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    has_pending_payment = operations.check_user_has_active_payment(user_id)
    
    if has_pending_payment:
        await message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
                ]
            )
        )
        return
    
    if has_subscription:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        days_left = (subscription_end - datetime.now()).days
        
        await message.answer(
            f"üíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {user.get('subscription_type')}\n\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {subscription_end.strftime('%d.%m.%Y')}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!",
            reply_markup=get_subscription_menu(is_subscribed=True)
        )
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        messages_left = user.get("free_messages_left", 0) if user else 0
        
        await message.answer(
            "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n\n"
            f"–£ –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}/3\n\n"
            "–° Premium –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏",
            reply_markup=get_subscription_menu(is_subscribed=False)
        )
    
    await state.set_state(SubscriptionStates.selecting_plan)

@handle_exception
async def subscription_action_handler(message: types.Message, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    if await back_to_menu_handler(message, state):
        return
    
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    if message.text == "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_subscription_plans()
        )
    
    elif message.text == "‚ùì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏":
        await message.answer(
            "üíé –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º ‚Äî –∑–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ "
            "–ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏: "
            "–ª—é–±–æ–≤—å, –∫–∞—Ä—å–µ—Ä–∞, –∑–¥–æ—Ä–æ–≤—å–µ, —Ñ–∏–Ω–∞–Ω—Å—ã –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç\n\n"
            "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª—é–¥–µ–π "
            "–∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n\n"
            "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã ‚Äî —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–∞—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∑–∞—Ä–∞–Ω–µ–µ\n\n"
            "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∏—Ç—ã –ø–ª–∞–Ω–µ—Ç ‚Äî –ø–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, "
            "–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –≤–∞—à—É –∂–∏–∑–Ω—å\n\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å",
            reply_markup=get_subscription_menu(is_subscribed=False)
        )
    
    elif message.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        if user and user.get("subscription_type") != "free" and user.get("subscription_end_date"):
            end_date = datetime.fromisoformat(user.get("subscription_end_date"))
            days_left = (end_date - datetime.now()).days
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions = operations.get_user_transactions(user_id)
            
            if transactions:
                last_transaction = transactions[0]
                payment_date = datetime.fromisoformat(last_transaction["created_at"]).strftime("%d.%m.%Y")
                amount = last_transaction["amount"]
                payment_method = last_transaction["payment_method"]
                
                transactions_text = (
                    f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂: {payment_date}\n"
                    f"–°—É–º–º–∞: ${amount}\n"
                    f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
                )
            else:
                transactions_text = "–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            
            await message.answer(
                f"üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ:\n\n"
                f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user.get('subscription_type')}\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
                f"üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n"
                f"{transactions_text}\n\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ Premium!",
                reply_markup=get_subscription_menu(is_subscribed=True)
            )
        else:
            await message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=get_subscription_menu(is_subscribed=False)
            )
    
    elif message.text == "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_subscription_plans()
        )

@handle_exception
async def subscription_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏"""
    action, plan = callback.data.split(":")
    
    if action == "subscribe":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
        price = SUBSCRIPTION_PRICES.get(plan, 0)
        months = 1
        if plan == "3_month":
            months = 3
        elif plan == "1_year":
            months = 12
        
        plan_text = {
            "1_month": "1 –º–µ—Å—è—Ü",
            "3_month": "3 –º–µ—Å—è—Ü–∞",
            "1_year": "1 –≥–æ–¥"
        }.get(plan, plan)
        
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            subscription_plan=plan,
            subscription_price=price,
            subscription_months=months
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        await callback.message.answer(
            f"üì± –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ '{plan_text}' (${price}):",
            reply_markup=get_payment_methods()
        )
        
        await state.set_state(SubscriptionStates.selecting_payment_method)

@handle_exception
async def payment_method_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    action, method = callback.data.split(":")
    
    if action == "payment_method":
        await callback.answer()
        
        data = await state.get_data()
        plan = data.get("subscription_plan")
        price = data.get("subscription_price", 0)
        
        if not plan or not price:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return
        
        user_id = str(callback.from_user.id)
        
        # –û—Ç–º–µ–Ω—è–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        operations.cancel_pending_transactions(user_id)
        
        if method == "tribute":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Tribute
            payment_result = await create_payment(user_id, plan, "tribute")
            
            if payment_result.get("success"):
                payment_url = payment_result.get("payment_url")
                
                await callback.message.answer(
                    "üí≥ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
                    f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                            [types.InlineKeyboardButton(text="–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)", callback_data="check_payment")]
                        ]
                    )
                )
                
                await state.set_state(SubscriptionStates.processing_payment)
            else:
                error = payment_result.get("error", "Unknown error")
                logger.error(f"Payment creation error: {error}")
                
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=get_main_menu()
                )
                await state.clear()
        
        elif method == "telegram_stars":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥—ã Telegram
            payment_result = await create_payment(user_id, plan, "telegram_stars", bot=callback.bot)
            
            if payment_result.get("success"):
                stars_amount = payment_result.get("stars_amount")
                
                await callback.message.answer(
                    f"‚≠êÔ∏è –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {stars_amount} –∑–≤–µ–∑–¥.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã, –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É.",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å {stars_amount} ‚≠êÔ∏è", callback_data=f"stars_payment:{plan}:{stars_amount}")],
                            [types.InlineKeyboardButton(text="–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–≤–µ–∑–¥—ã", callback_data="check_stars")]
                        ]
                    )
                )
                
                await state.set_state(SubscriptionStates.processing_payment)
            else:
                error = payment_result.get("error", "Unknown error")
                logger.error(f"Stars payment creation error: {error}")
                
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=get_main_menu()
                )
                await state.clear()

@handle_exception
async def check_payment_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    action = callback.data
    
    if action == "check_payment":
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
        
        user_id = str(callback.from_user.id)
        transaction = operations.get_pending_transaction(user_id)
        
        if transaction and transaction.get("status") == "completed":
            # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            await callback.message.answer(
                "‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=get_main_menu()
            )
            await state.set_state(NatalChartStates.dialog_active)
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            await callback.message.answer(
                "‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="check_payment")],
                        [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
                    ]
                )
            )
    
    elif action == "check_stars":
        await callback.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–≤–µ–∑–¥...")
        
        user_id = str(callback.from_user.id)
        data = await state.get_data()
        plan = data.get("subscription_plan")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤–µ–∑–¥
        # —á–µ—Ä–µ–∑ API Telegram, –Ω–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        result = await telegram_stars_payment.process_stars_transfer(
            user_id, 
            plan, 
            data.get("stars_amount", 0)
        )
        
        if result.get("success"):
            await callback.message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–≤–µ–∑–¥! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=get_main_menu()
            )
            await state.set_state(NatalChartStates.dialog_active)
        else:
            error = result.get("error", "Unknown error")
            
            if "Insufficient stars" in error:
                await callback.message.answer(
                    "‚ö†Ô∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–≤–µ–∑–¥—ã", callback_data="check_stars")],
                            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
                        ]
                    )
                )
            else:
                await callback.message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=get_main_menu()
                )
                await state.clear()
    
    elif action == "cancel_payment":
        user_id = str(callback.from_user.id)
        
        # –û—Ç–º–µ–Ω—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cancelled = operations.cancel_pending_transactions(user_id)
        
        if cancelled > 0:
            await callback.message.answer(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
                reply_markup=get_main_menu()
            )
        else:
            await callback.message.answer(
                "‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                reply_markup=get_main_menu()
            )
        
        await state.clear()

@handle_exception
async def stars_payment_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥ Telegram"""
    parts = callback.data.split(":")
    
    if len(parts) >= 3 and parts[0] == "stars_payment":
        plan = parts[1]
        stars_amount = int(parts[2])
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ API Telegram –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥
        # –ù–æ —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É API, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–≤–µ–∑–¥ –≤ Telegram")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await state.update_data(stars_amount=stars_amount)
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Telegram Payments API
        await callback.message.answer(
            f"‚≠êÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {stars_amount} –∑–≤–µ–∑–¥ –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–≤–µ–∑–¥—ã' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [types.InlineKeyboardButton(text="–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –∑–≤–µ–∑–¥—ã", callback_data="check_stars")],
                    [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="cancel_payment")]
                ]
            )
        )

@handle_exception
async def premium_info_callback(callback: types.CallbackQuery, state: FSMContext, **kwargs):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
    channel_name = PREMIUM_CHANNEL_ID.replace("@", "")
    channel_link = f"https://t.me/{channel_name}"
    
    premium_info = (
        "üíé –ü—Ä–µ–º–∏—É–º-–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:\n\n"
        "1Ô∏è‚É£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –ø—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª - –ø–æ–ª—É—á–∞–π—Ç–µ –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É:\n"
        f"‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        f"‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        f"‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n\n"
        "2Ô∏è‚É£ –û—Ñ–æ—Ä–º–∏—Ç—å –ø—Ä—è–º—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞:\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–ª–∞–Ω–µ—Ç –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—Å\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä—è–º–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "1 –º–µ—Å—è—Ü ‚Äî $4.99\n"
        "3 –º–µ—Å—è—Ü–∞ ‚Äî $9.99\n"
        "1 –≥–æ–¥ ‚Äî $29.99"
    )
    
    await callback.message.answer(
        premium_info,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí´ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª", url=channel_link)],
                [types.InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –±–æ—Ç–∞", callback_data="subscribe_menu")]
            ]
        )
    )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ /subscription –∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    dp.message.register(subscription_command, Command("subscription"))
    dp.message.register(subscription_command, F.text == "üí∞ –ü–æ–¥–ø–∏—Å–∫–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    dp.message.register(
        subscription_action_handler,
        SubscriptionStates.selecting_plan,
        F.text.in_([
            "üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            "‚ùì –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
            "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ",
            "üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
        ])
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(
        subscription_callback,
        lambda c: c.data.startswith("subscribe:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    dp.callback_query.register(
        payment_method_callback,
        lambda c: c.data.startswith("payment_method:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
    dp.callback_query.register(
        check_payment_callback,
        lambda c: c.data in ["check_payment", "check_stars", "cancel_payment"]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–≤–µ–∑–¥ Telegram
    dp.callback_query.register(
        stars_payment_callback,
        lambda c: c.data.startswith("stars_payment:")
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ
    dp.callback_query.register(
        premium_info_callback,
        lambda c: c.data == "premium_info"
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(
        lambda c, state: subscription_command(c.message, state, **kwargs),
        lambda c: c.data == "subscribe_menu"
    )