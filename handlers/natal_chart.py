from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

from states.user_states import NatalChartStates
from utils.keyboards import (
    get_main_menu, 
    get_yes_no_keyboard, 
    get_time_periods_keyboard,
    get_back_button
)
from utils.date_parser import parse_date_input, parse_time_input
from services.geo import get_location_info, get_utc_datetime, parse_coordinates
from services.ephemeris import (
    calculate_planet_positions_utc, 
    calculate_houses_utc, 
    format_natal_chart
)
from services.openai_service import generate_natal_chart_interpretation
from database import operations
from handlers.start import back_to_menu_handler

logger = logging.getLogger(__name__)

async def natal_chart_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /natal –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    if user and user.get("natal_chart"):
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
        await message.answer(
            "üìä –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞.\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—É")],
                    [types.KeyboardButton(text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É")],
                    [types.KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(NatalChartStates.dialog_active)
    else:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        await message.answer(
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –º–Ω–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º —Ä–æ–∂–¥–µ–Ω–∏–∏.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990).",
            reply_markup=get_back_button()
        )
        await state.set_state(NatalChartStates.waiting_for_date)

async def natal_chart_action_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
    if await back_to_menu_handler(message, state):
        return
        
    if message.text == "üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—É":
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990).",
            reply_markup=get_back_button()
        )
        await state.set_state(NatalChartStates.waiting_for_date)
    elif message.text == "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É":
        user_id = str(message.from_user.id)
        user = operations.get_user(user_id)
        
        if user and user.get("natal_chart"):
            chart_text = user["natal_chart"]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
            interpretation = await generate_natal_chart_interpretation(chart_text, user_id)
            
            await message.answer(
                f"üìä –í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:\n\n{chart_text}\n\n"
                f"üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n\n{interpretation}",
                reply_markup=get_main_menu()
            )
            await state.set_state(NatalChartStates.dialog_active)
        else:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É. –î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –µ—ë –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_back_button()
            )
            await state.set_state(NatalChartStates.waiting_for_date)

async def process_birth_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await back_to_menu_handler(message, state):
        return
        
    parsed_date = parse_date_input(message.text.strip())
    if parsed_date:
        await state.update_data(date=parsed_date)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –¥–∞—Ç—É: {parsed_date}")
        
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30) "
            "–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:",
            reply_markup=get_time_periods_keyboard()
        )
        await state.set_state(NatalChartStates.waiting_for_time)
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990).",
            reply_markup=get_back_button()
        )

async def process_birth_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await back_to_menu_handler(message, state):
        return
        
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.05.1990).",
            reply_markup=get_back_button()
        )
        await state.set_state(NatalChartStates.waiting_for_date)
        return
        
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    time_mapping = {
        "–£—Ç—Ä–æ–º (09:00)": "09:00",
        "–î–Ω–µ–º (15:00)": "15:00",
        "–í–µ—á–µ—Ä–æ–º (21:00)": "21:00",
        "–ù–æ—á—å—é (03:00)": "03:00"
    }
    
    if message.text in time_mapping:
        parsed_time = time_mapping[message.text]
    else:
        parsed_time = parse_time_input(message.text.strip())
    
    await state.update_data(time=parsed_time)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –≤—Ä–µ–º—è: {parsed_time}")
    
    await message.answer(
        "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù—å—é-–ô–æ—Ä–∫ –∏ —Ç.–¥.",
        reply_markup=get_back_button()
    )
    await state.set_state(NatalChartStates.waiting_for_city)

async def process_birth_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await back_to_menu_handler(message, state):
        return
        
    city = message.text.strip()
    data = await state.get_data()
    date = data.get('date')
    time_str = data.get('time')
    
    try:
        birth_dt = datetime.strptime(f"{date} {time_str}", "%d.%m.%Y %H:%M")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return
    
    location_info = get_location_info(city, birth_dt)
    if not location_info:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.",
            reply_markup=get_back_button()
        )
        return
    
    await state.update_data(
        city=city,
        lat=location_info["lat"],
        lon=location_info["lon"],
        tz_name=location_info["tz_name"],
        gmt_offset=location_info.get("gmt_offset"),
        is_dst=location_info.get("is_dst")
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥: {city}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    location_message = (
        f"üìç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_info.get('address', city)}\n"
        f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_info['lat']:.6f}, {location_info['lon']:.6f}\n"
        f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location_info['tz_name']}"
    )
    await message.answer(location_message)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Ä–æ–¥–¥–æ–º–∞
    await message.answer(
        "–í–∞–∂–Ω–æ: —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞—Å—á—ë—Ç –¥–æ–º–æ–≤ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.\n\n"
        "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–æ–¥–¥–æ–º–∞ –∏–ª–∏ –º–µ—Å—Ç–∞ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è?",
        reply_markup=get_yes_no_keyboard()
    )
    await state.set_state(NatalChartStates.waiting_for_hospital_coords_choice)

async def process_coords_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–æ–¥–¥–æ–º–∞"""
    if await back_to_menu_handler(message, state):
        return
        
    text = message.text.strip().lower()
    if text == "–¥–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞'.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 55.7558, 37.6176\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Google Maps –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(NatalChartStates.waiting_for_hospital_coords)
    elif text == "–Ω–µ—Ç":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        await message.answer(
            "–•–æ—Ä–æ—à–æ, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.\n\n"
            "‚ú® –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await proceed_with_calculation(message, state)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
            reply_markup=get_yes_no_keyboard()
        )

async def process_hospital_coords(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–æ–¥–¥–æ–º–∞"""
    if await back_to_menu_handler(message, state):
        return
        
    coords = parse_coordinates(message.text.strip())
    if coords:
        lat, lon = coords
        await state.update_data(lat=lat, lon=lon)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: lat={lat}, lon={lon}")
        
        await message.answer(
            f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã: {lat:.6f}, {lon:.6f}\n\n"
            "‚ú® –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await proceed_with_calculation(message, state)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞' "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 55.7558, 37.6176).",
            reply_markup=types.ReplyKeyboardRemove()
        )

async def proceed_with_calculation(message: types.Message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    await state.set_state(NatalChartStates.calculating)
    
    data = await state.get_data()
    date = data.get('date')
    time_str = data.get('time')
    tz_name = data.get('tz_name', 'UTC')
    lat = data.get('lat')
    lon = data.get('lon')
    
    utc_dt = get_utc_datetime(date, time_str, tz_name)
    if not utc_dt:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}: UTC = {utc_dt}, lat = {lat}, lon = {lon}")
    
    planets = calculate_planet_positions_utc(utc_dt, lat, lon)
    houses = calculate_houses_utc(utc_dt, lat, lon)
    
    if not planets or not houses:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )
        await state.clear()
        return
    
    formatted_chart = format_natal_chart(planets, houses)
    logger.info(f"–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(planets=planets, houses=houses, formatted_chart=formatted_chart)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_id = str(message.from_user.id)
    operations.update_user_birth_info(
        user_id, 
        date, 
        time_str, 
        data.get('city', ''), 
        lat, 
        lon, 
        tz_name, 
        formatted_chart
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    await message.answer("‚úÖ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    interpretation = await generate_natal_chart_interpretation(formatted_chart, user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        f"üìä –í–∞—à–∞ –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞:\n\n{formatted_chart}\n\n"
        f"üîÆ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n\n{interpretation}",
        reply_markup=get_main_menu()
    )
    
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–π –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –∏ –∂–∏–∑–Ω–∏, "
        "–∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã.",
        reply_markup=get_main_menu()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞
    await state.set_state(NatalChartStates.dialog_active)

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
    # –ö–æ–º–∞–Ω–¥–∞ /natal –∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    dp.message.register(natal_chart_command, Command("natal"))
    dp.message.register(natal_chart_command, F.text == "üåü –ú–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞")    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ–π
    dp.message.register(
        natal_chart_action_handler,
        NatalChartStates.dialog_active,
        F.text.in_(["üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–∞—Ä—Ç—É", "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∫–∞—Ä—Ç—É"])
    )
    
    # –í–≤–æ–¥ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    dp.message.register(process_birth_date, NatalChartStates.waiting_for_date)
    
    # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
    dp.message.register(process_birth_time, NatalChartStates.waiting_for_time)
    
    # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    dp.message.register(process_birth_city, NatalChartStates.waiting_for_city)
    
    # –í—ã–±–æ—Ä –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    dp.message.register(process_coords_choice, NatalChartStates.waiting_for_hospital_coords_choice)
    
    # –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–æ–¥–¥–æ–º–∞
    dp.message.register(process_hospital_coords, NatalChartStates.waiting_for_hospital_coords)