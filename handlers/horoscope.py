from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

from states.user_states import HoroscopeSettingsStates, NatalChartStates
from utils.keyboards import (
    get_main_menu,
    get_yes_no_keyboard,
    get_horoscope_menu,
    get_horoscope_time_keyboard,
    get_back_button
)
from utils.date_parser import parse_time_input
from services.geo import get_location_info, parse_coordinates
from services.ephemeris import (
    calculate_planet_positions_utc,
    calculate_houses_utc,
    format_natal_chart
)
from services.openai_service import generate_daily_horoscope
from database import operations
from handlers.start import back_to_menu_handler

logger = logging.getLogger(__name__)

async def horoscope_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /horoscope –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞
    if not user or not user.get("natal_chart"):
        await message.answer(
            "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /natal –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —É–∂–µ –≥–æ—Ä–æ—Å–∫–æ–ø
    if user.get("horoscope_time") and user.get("horoscope_city"):
        await message.answer(
            f"üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞\n\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user.get('horoscope_time')}\n"
            f"üåç –ì–æ—Ä–æ–¥: {user.get('horoscope_city')}\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=get_horoscope_menu()
        )
    else:
        await message.answer(
            "üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞\n\n"
            "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —É—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, "
            "–Ω–æ –∏ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ –º–µ—Å—Ç–µ.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø:",
            reply_markup=get_horoscope_time_keyboard()
        )
        await state.set_state(HoroscopeSettingsStates.waiting_for_time)

async def horoscope_settings_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    if await back_to_menu_handler(message, state):
        return
    
    if message.text == "‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è":
        await message.answer(
            "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø?",
            reply_markup=get_horoscope_time_keyboard()
        )
        await state.set_state(HoroscopeSettingsStates.waiting_for_time)
    
    elif message.text == "üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥":
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç.",
            reply_markup=get_back_button()
        )
        await state.set_state(HoroscopeSettingsStates.waiting_for_city)
    
    elif message.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
        user_id = str(message.from_user.id)
        user = operations.get_user(user_id)
        
        if user.get("horoscope_time") and user.get("horoscope_city"):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            horoscope = operations.get_last_horoscope(user_id)
            
            settings_message = (
                f"üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞\n\n"
                f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {user.get('horoscope_time')}\n"
                f"üåç –ì–æ—Ä–æ–¥: {user.get('horoscope_city')}\n"
                f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {user.get('horoscope_latitude', 0):.4f}, {user.get('horoscope_longitude', 0):.4f}\n\n"
            )
            
            if horoscope:
                settings_message += (
                    f"üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {horoscope.get('created_at')}\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å–µ–π—á–∞—Å?"
                )
                
                await message.answer(
                    settings_message,
                    reply_markup=types.ReplyKeyboardMarkup(
                        keyboard=[
                            [types.KeyboardButton(text="‚ú® –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø")],
                            [types.KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                await state.set_state(HoroscopeSettingsStates.confirming_settings)
            else:
                settings_message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤."
                await message.answer(settings_message, reply_markup=get_horoscope_menu())
        else:
            await message.answer(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø. –î–∞–≤–∞–π—Ç–µ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–∏–º!",
                reply_markup=get_horoscope_menu()
            )

async def process_horoscope_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    if await back_to_menu_handler(message, state):
        return
    
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        user_id = str(message.from_user.id)
        user = operations.get_user(user_id)
        
        if user.get("horoscope_time") and user.get("horoscope_city"):
            await message.answer(
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.",
                reply_markup=get_horoscope_menu()
            )
        else:
            await message.answer(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=get_main_menu()
            )
        
        await state.clear()
        return
    
    time_str = message.text.strip()
    parsed_time = parse_time_input(time_str)
    
    await state.update_data(horoscope_time=parsed_time)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {parsed_time}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    if user.get("horoscope_city"):
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è
        operations.update_user_horoscope_settings(
            user_id,
            parsed_time,
            user.get("horoscope_city"),
            user.get("horoscope_latitude"),
            user.get("horoscope_longitude")
        )
        
        await message.answer(
            f"‚úÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {parsed_time}.\n\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ {parsed_time}.",
            reply_markup=get_horoscope_menu()
        )
        
        await state.clear()
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–∞ –µ—â–µ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
        await message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å. "
            "–≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç.",
            reply_markup=get_back_button()
        )
        await state.set_state(HoroscopeSettingsStates.waiting_for_city)

async def process_horoscope_city(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    if await back_to_menu_handler(message, state):
        return
    
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø?",
            reply_markup=get_horoscope_time_keyboard()
        )
        await state.set_state(HoroscopeSettingsStates.waiting_for_time)
        return
    
    city = message.text.strip()
    location_info = get_location_info(city)
    
    if not location_info:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ.",
            reply_markup=get_back_button()
        )
        return
    
    await state.update_data(
        horoscope_city=city,
        horoscope_latitude=location_info["lat"],
        horoscope_longitude=location_info["lon"]
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {city}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    location_message = (
        f"üìç –ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location_info.get('address', city)}\n"
        f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location_info['lat']:.6f}, {location_info['lon']:.6f}\n"
        f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {location_info['tz_name']}"
    )
    await message.answer(location_message)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –≥–æ—Ä–æ—Å–∫–æ–ø–∞?",
        reply_markup=get_yes_no_keyboard()
    )
    await state.set_state(HoroscopeSettingsStates.waiting_for_coords_choice)

async def process_coords_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    if await back_to_menu_handler(message, state):
        return
        
    text = message.text.strip().lower()
    
    if text == "–¥–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞'.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 55.7558, 37.6176\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ Google Maps –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state(HoroscopeSettingsStates.waiting_for_coords)
    elif text == "–Ω–µ—Ç":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç–æ—á–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        data = await state.get_data()
        horoscope_time = data.get('horoscope_time')
        horoscope_city = data.get('horoscope_city')
        horoscope_lat = data.get('horoscope_latitude')
        horoscope_lon = data.get('horoscope_longitude')
        
        user_id = str(message.from_user.id)
        operations.update_user_horoscope_settings(
            user_id,
            horoscope_time,
            horoscope_city,
            horoscope_lat,
            horoscope_lon
        )
        
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {horoscope_time}\n"
            f"üåç –ì–æ—Ä–æ–¥: {horoscope_city}\n\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ {horoscope_time}.\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(HoroscopeSettingsStates.confirming_settings)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
            reply_markup=get_yes_no_keyboard()
        )

async def process_coords(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    if await back_to_menu_handler(message, state):
        return
        
    coords = parse_coordinates(message.text.strip())
    if coords:
        lat, lon = coords
        
        await state.update_data(horoscope_latitude=lat, horoscope_longitude=lon)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞: lat={lat}, lon={lon}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
        data = await state.get_data()
        horoscope_time = data.get('horoscope_time')
        horoscope_city = data.get('horoscope_city')
        
        user_id = str(message.from_user.id)
        operations.update_user_horoscope_settings(
            user_id,
            horoscope_time,
            horoscope_city,
            lat,
            lon
        )
        
        await message.answer(
            f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
            f"‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {horoscope_time}\n"
            f"üåç –ì–æ—Ä–æ–¥: {horoscope_city}\n"
            f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}\n\n"
            f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ {horoscope_time}.\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            reply_markup=get_yes_no_keyboard()
        )
        await state.set_state(HoroscopeSettingsStates.confirming_settings)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞' "
            "(–Ω–∞–ø—Ä–∏–º–µ—Ä, 55.7558, 37.6176).",
            reply_markup=types.ReplyKeyboardRemove()
        )

async def confirm_settings(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞"""
    if await back_to_menu_handler(message, state):
        return
    
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.",
            reply_markup=get_horoscope_menu()
        )
        await state.clear()
        return
    
    if message.text.lower() == "–¥–∞" or message.text == "‚ú® –ü–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø":
        user_id = str(message.from_user.id)
        user = operations.get_user(user_id)
        
        if not user or not user.get("natal_chart"):
            await message.answer(
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return
        
        await message.answer(
            "‚ú® –°–æ—Å—Ç–∞–≤–ª—è—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–µ—Ç
        now = datetime.now()
        lat = user.get("horoscope_latitude", 0)
        lon = user.get("horoscope_longitude", 0)
        
        planets = calculate_planet_positions_utc(now, lat, lon)
        houses = calculate_houses_utc(now, lat, lon)
        
        if not planets or not houses:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–ª–∞–Ω–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu()
            )
            await state.clear()
            return
        
        formatted_planets = format_natal_chart(planets, houses)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º
        is_premium = user.get("subscription_type") != "free"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
        natal_chart = user.get("natal_chart", "")
        horoscope_text = await generate_daily_horoscope(
            natal_chart,
            formatted_planets,
            user_id,
            is_premium
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –±–∞–∑—É
        operations.add_horoscope(user_id, horoscope_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ä–æ—Å–∫–æ–ø
        await message.answer(
            f"üåü –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {now.strftime('%d.%m.%Y')}:\n\n{horoscope_text}",
            reply_markup=get_main_menu()
        )
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–º–∏—É–º, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not is_premium:
            await message.answer(
                "üí° –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?\n\n"
                "–° –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º "
                "–≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –Ω–∞ –¥–µ–Ω—å.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üíé –£–∑–Ω–∞—Ç—å –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ", callback_data="premium_info")]
                    ]
                )
            )
        
        await state.set_state(NatalChartStates.dialog_active)
    elif message.text.lower() == "–Ω–µ—Ç":
        await message.answer(
            "–•–æ—Ä–æ—à–æ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_menu()
        )
        await state.clear()
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.",
            reply_markup=get_yes_no_keyboard()
        )

async def premium_info_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ"""
    await callback.answer()
    
    premium_info = (
        "üíé –ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –≤–∞—Å!\n\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω—ã–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö —Å—Ñ–µ—Ä –∂–∏–∑–Ω–∏\n"
        "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
        "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø–ª–∞–Ω–µ—Ç –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –≤–∞—Å\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "1 –º–µ—Å—è—Ü ‚Äî $4.99\n"
        "3 –º–µ—Å—è—Ü–∞ ‚Äî $9.99\n"
        "1 –≥–æ–¥ ‚Äî $29.99"
    )
    
    await callback.message.answer(
        premium_info,
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_menu")]
            ]
        )
    )

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞–º–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ /horoscope –∏ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é
    dp.message.register(horoscope_command, Command("horoscope"))
    dp.message.register(horoscope_command, F.text == "üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    dp.message.register(
        horoscope_settings_handler,
        F.text.in_(["‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è", "üåç –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"])
    )
    
    # –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    dp.message.register(process_horoscope_time, HoroscopeSettingsStates.waiting_for_time)
    
    # –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    dp.message.register(process_horoscope_city, HoroscopeSettingsStates.waiting_for_city)
    
    # –í—ã–±–æ—Ä –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    dp.message.register(process_coords_choice, HoroscopeSettingsStates.waiting_for_coords_choice)
    
    # –í–≤–æ–¥ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    dp.message.register(process_coords, HoroscopeSettingsStates.waiting_for_coords)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    dp.message.register(confirm_settings, HoroscopeSettingsStates.confirming_settings)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ
    dp.callback_query.register(premium_info_callback, lambda c: c.data == "premium_info")