from aiogram import Dispatcher, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from collections import deque
import logging

from states.user_states import NatalChartStates
from utils.keyboards import get_main_menu
from services.openai_service import process_user_dialog
from database import operations
from config import MAX_MESSAGES

logger = logging.getLogger(__name__)

async def user_dialog_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã"""
    user_id = str(message.from_user.id)
    user = operations.get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    can_message = operations.check_user_can_message(user_id)
    if not can_message:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å—á–µ—Ä–ø–∞–ª –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç
        subscription_type = user.get("subscription_type", "free")
        
        if subscription_type == "free":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–±–ª—é—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É
            await message.answer(
                "‚ö†Ô∏è –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (3 —Å–æ–æ–±—â–µ–Ω–∏—è).\n\n"
                "<span class='tg-spoiler'>–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.</span>",
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üíé –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç (90 ‚≠êÔ∏è)", callback_data="unlock_message")],
                        [types.InlineKeyboardButton(text="üíé –£–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="premium_info")]
                    ]
                )
            )
            return
        else:
            # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
            await message.answer(
                "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe_menu")]
                    ]
                )
            )
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user or not user.get("natal_chart"):
        await message.answer(
            "–î–ª—è –æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞—à—É –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /natal –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ—è –Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞'.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history = await get_or_create_message_history(state)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    contacts = operations.get_contacts(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    natal_chart = user.get("natal_chart", "")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await process_user_dialog(
        user_id,
        message.text,
        natal_chart,
        contacts,
        history
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    history.append({"role": "user", "content": message.text})
    history.append({"role": "assistant", "content": result["reply"]})
    await state.update_data(message_history=list(history))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    reply_text = result["reply"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if result["mentioned_contacts"]:
        contacts_info = ", ".join(result["mentioned_contacts"])
        mention_note = f"\n\n_–£—á—Ç–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {contacts_info}_"
        reply_text += mention_note
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(reply_text, reply_markup=get_main_menu())
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç
    if user.get("subscription_type") == "free":
        free_left = user.get("free_messages_left", 0)
        if free_left <= 3:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            await message.answer(
                f"‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {free_left} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ 3.\n"
                "–ü–æ—Å–ª–µ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç —Å–∫—Ä—ã—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [types.InlineKeyboardButton(text="üíé –£–∑–Ω–∞—Ç—å –æ –ø–æ–¥–ø–∏—Å–∫–µ", callback_data="premium_info")]
                    ]
                )
            )

async def get_or_create_message_history(state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    
    if "message_history" in data:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ deque
        history_list = data["message_history"]
        history = deque(history_list, maxlen=MAX_MESSAGES)
    else:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
        history = deque(maxlen=MAX_MESSAGES)
    
    return history

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def unlock_message_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    from aiogram.types import LabeledPrice
    
    prices = [LabeledPrice(label="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞", amount=90)]
    
    await callback.message.answer_invoice(
        title="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞",
        description="–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞",
        payload=f"unlock_msg_{user_id}_{int(datetime.now().timestamp())}",
        provider_token="",
        currency="XTR",
        prices=prices
    )
    
    await callback.answer()

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞"""
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞
    dp.message.register(user_dialog_handler, StateFilter(NatalChartStates.dialog_active))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    dp.callback_query.register(
        unlock_message_callback,
        lambda c: c.data == "unlock_message"
    )