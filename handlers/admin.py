from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
import logging

from states.user_states import AdminStates
from utils.keyboards import get_main_menu, get_admin_menu, get_admin_user_actions
from database import operations
from config import ADMIN_USERNAME, ADMIN_PASSWORD

logger = logging.getLogger(__name__)

async def admin_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å"""
    await message.answer(
        "üîí –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(AdminStates.waiting_for_login)

async def process_admin_login(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    login = message.text.strip()
    
    if login == ADMIN_USERNAME:
        await state.update_data(admin_login=login)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
        await state.set_state(AdminStates.waiting_for_password)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )

async def process_admin_password(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    password = message.text.strip()
    
    if password == ADMIN_PASSWORD:
        await message.answer(
            "‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.",
            reply_markup=get_admin_menu()
        )
        await state.set_state(AdminStates.admin_active)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = operations.get_total_stats()
        
        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_users']}\n"
            f"üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['paid_users']}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            f"üíû –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {stats['total_compatibility_analyses']}\n"
            f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤: {stats['total_horoscopes']}\n"
            f"üí∞ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ API: ${stats['total_api_cost']:.2f}"
        )
        
        await message.answer(stats_message, reply_markup=get_admin_menu())
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )

async def admin_menu_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é"""
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if message.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = operations.get_all_users()
        
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_admin_menu())
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        
        for i, user in enumerate(users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            username = user.get("username", "")
            first_name = user.get("first_name", "")
            last_name = user.get("last_name", "")
            subscription_type = user.get("subscription_type", "free")
            messages_count = user.get("input_tokens", 0) + user.get("output_tokens", 0)
            
            user_name = username or f"{first_name} {last_name}"
            subscription_emoji = "üíé" if subscription_type != "free" else "üÜì"
            
            users_text += f"{i}. {subscription_emoji} {user_name} (ID: {user['user_id']})\n"
        
        users_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–∫–∞–∑–∞–≤ –µ–≥–æ –Ω–æ–º–µ—Ä –∏–ª–∏ ID:"
        
        await message.answer(users_text, reply_markup=get_admin_menu())
        await state.set_state(AdminStates.selecting_user)
    
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = operations.get_total_stats()
        
        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: {stats['active_users']}\n"
            f"üíé –° –ø–æ–¥–ø–∏—Å–∫–æ–π: {stats['paid_users']}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
            f"üíû –ü—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {stats['total_compatibility_analyses']}\n"
            f"üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø–æ–≤: {stats['total_horoscopes']}\n"
            f"üí∞ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ API: ${stats['total_api_cost']:.2f}"
        )
        
        await message.answer(stats_message, reply_markup=get_admin_menu())
    
    elif message.text == "üí∞ –§–∏–Ω–∞–Ω—Å—ã":
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = operations.get_total_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        users = operations.get_all_users()
        subscription_counts = {"1_month": 0, "3_month": 0, "1_year": 0}
        
        for user in users:
            if user.get("subscription_type") != "free":
                subscription_counts[user.get("subscription_type", "1_month")] += 1
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥
        revenue = (
            subscription_counts["1_month"] * 4.99 +
            subscription_counts["3_month"] * 9.99 +
            subscription_counts["1_year"] * 29.99
        )
        
        finance_message = (
            "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['paid_users']}\n"
            f"  - 1 –º–µ—Å—è—Ü ($4.99): {subscription_counts['1_month']}\n"
            f"  - 3 –º–µ—Å—è—Ü–∞ ($9.99): {subscription_counts['3_month']}\n"
            f"  - 1 –≥–æ–¥ ($29.99): {subscription_counts['1_year']}\n\n"
            f"üíµ –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥: ${revenue:.2f}\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ API: ${stats['total_api_cost']:.2f}\n\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: ${revenue - stats['total_api_cost']:.2f}"
        )
        
        await message.answer(finance_message, reply_markup=get_admin_menu())
    
    elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        settings_message = (
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 3\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω—ã API OpenAI: –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
            "‚Ä¢ –¢–æ–∫–µ–Ω Telegram: –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."
        )
        
        await message.answer(settings_message, reply_markup=get_admin_menu())

async def select_user_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    if message.text == "üö™ –í—ã—Ö–æ–¥":
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.", reply_markup=get_main_menu())
        await state.clear()
        return
    
    if message.text in ["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]:
        await admin_menu_handler(message, state)
        return
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = None
    
    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
    if message.text.isdigit():
        index = int(message.text) - 1
        users = operations.get_all_users()
        
        if 0 <= index < len(users):
            user_id = users[index]["user_id"]
    else:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
        user_id = message.text.strip()
    
    if user_id:
        user = operations.get_user(user_id)
        
        if user:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(selected_user_id=user_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = format_user_info(user)
            
            await message.answer(
                user_info,
                reply_markup=get_admin_user_actions(user_id)
            )
            
            await state.set_state(AdminStates.viewing_user_details)
        else:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_admin_menu()
            )
    else:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_admin_menu()
        )

async def user_action_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏"""
    action, user_id = callback.data.split(":")
    
    if action == "admin_messages":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages = operations.get_user_messages(user_id)
        
        if not messages:
            await callback.answer("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        messages_text = f"üí¨ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
        
        for i, msg in enumerate(messages[-10:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            direction = "üë§" if msg["direction"] == "in" else "ü§ñ"
            created_at = msg.get("created_at", "")
            content = msg.get("content", "")
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(content) > 100:
                content = content[:100] + "..."
            
            messages_text += f"{i}. {direction} {created_at}: {content}\n\n"
        
        await callback.message.answer(messages_text, reply_markup=get_admin_menu())
        await callback.answer()
    
    elif action == "admin_subscription":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = operations.get_user(user_id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions = operations.get_user_transactions(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_text = (
            f"üíé –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
            f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {user.get('subscription_type', 'free')}\n"
            f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user.get('subscription_end_date', '–ù–µ—Ç')}\n\n"
        )
        
        if transactions:
            subscription_text += "üí≥ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
            
            for i, tx in enumerate(transactions, 1):
                subscription_text += (
                    f"{i}. –î–∞—Ç–∞: {tx.get('created_at', '')}\n"
                    f"   –ü–ª–∞–Ω: {tx.get('subscription_type', '')}\n"
                    f"   –°—É–º–º–∞: ${tx.get('amount', 0)}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {tx.get('status', '')}\n\n"
                )
        else:
            subscription_text += "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
        
        await callback.message.answer(subscription_text, reply_markup=get_admin_menu())
        await callback.answer()
    
    elif action == "admin_natal":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = operations.get_user(user_id)
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        natal_chart = user.get("natal_chart", "–ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞")
        
        natal_text = (
            f"üîÆ –ù–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n"
            f"{natal_chart}\n\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('birth_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
        )
        
        await callback.message.answer(natal_text, reply_markup=get_admin_menu())
        await callback.answer()
    
    elif action == "admin_send_message":
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º—Å—è –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await state.update_data(message_to_user_id=user_id)
        
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}:",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")]
                ],
                resize_keyboard=True
            )
        )
        
        await state.set_state(AdminStates.admin_active)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ state, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ø–æ-–¥—Ä—É–≥–æ–º—É
        await callback.answer()

async def send_message_to_user(message: types.Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.text == "–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏":
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_admin_menu())
        return
    
    data = await state.get_data()
    user_id = data.get("message_to_user_id")
    
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu())
        return
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.bot.send_message(
            user_id,
            f"üì£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        
        await message.answer(
            f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.",
            reply_markup=get_admin_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}",
            reply_markup=get_admin_menu()
        )

def format_user_info(user):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    user_id = user.get("user_id", "")
    username = user.get("username", "")
    first_name = user.get("first_name", "")
    last_name = user.get("last_name", "")
    subscription_type = user.get("subscription_type", "free")
    subscription_end = user.get("subscription_end_date", "")
    birth_date = user.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–∞")
    birth_time = user.get("birth_time", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    city = user.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω")
    free_messages_left = user.get("free_messages_left", 0)
    registration_date = user.get("registration_date", "")
    last_activity = user.get("last_activity", "")
    input_tokens = user.get("input_tokens", 0)
    output_tokens = user.get("output_tokens", 0)
    total_cost = user.get("total_cost", 0)
    
    # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    total_tokens = input_tokens + output_tokens
    
    user_info = (
        f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"ID: {user_id}\n"
        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n"
        f"–ò–º—è: {first_name}\n"
        f"–§–∞–º–∏–ª–∏—è: {last_name}\n\n"
        
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n"
        f"‚è± –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity}\n\n"
        
        f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {subscription_type}\n"
        f"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {subscription_end}\n"
        f"üî¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {free_messages_left}\n\n"
        
        f"üåü –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
        f"üïí –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_time}\n"
        f"üåç –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è: {city}\n\n"
        
        f"üí¨ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens}\n"
        f"üì• –í—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {input_tokens}\n"
        f"üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ —Ç–æ–∫–µ–Ω—ã: {output_tokens}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å API: ${total_cost:.4f}\n\n"
        
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    return user_info

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    dp.message.register(admin_command, Command("admin"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    dp.message.register(process_admin_login, AdminStates.waiting_for_login)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    dp.message.register(process_admin_password, AdminStates.waiting_for_password)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message.register(
        admin_menu_handler,
        AdminStates.admin_active,
        F.text.in_(["üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üö™ –í—ã—Ö–æ–¥"])
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.register(select_user_handler, AdminStates.selecting_user)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
    dp.callback_query.register(
        user_action_callback,
        lambda c: c.data.startswith(("admin_messages:", "admin_subscription:", "admin_natal:", "admin_send_message:"))
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    dp.message.register(
        send_message_to_user,
        AdminStates.admin_active,
        lambda message: message.text != "–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏" and not message.text.startswith("/")
    )